Sections:
00: "seg1000" (1000-116C)


Source: "input_lcd.s"
                        	     1: ;-------------------------------------
                        	     2: ; input_lcd
                        	     3: ;
                        	     4: ; Author: Kelly Loyd
                        	     5: ; Setup LCD output
                        	     6: ; Prompt User for a string
                        	     7: ; write string to LCD
                        	     8: ; Repeat until empty string.
                        	     9: ;
                        	    10: 
                        	    11: ; --- 65C22 PIA ports and data direction registers.
                        	    12: PORTB = $6000
                        	    13: PORTA = $6001
                        	    14: DDRB = $6002
                        	    15: DDRA = $6003
                        	    16: PCR = $600c
                        	    17: IFR = $600d
                        	    18: IER = $600e
                        	    19: ; --- 65C22 control Lines.
                        	    20: ; E, RW, RS lines on LCD connected to PB6, PB5, PB4
                        	    21: E  = %01000000
                        	    22: RW = %00100000
                        	    23: RS = %00010000
                        	    24: ; Serial port
                        	    25: ACIA_DATA   = $5000
                        	    26: ACIA_STATUS = $5001
                        	    27: ACIA_CMD    = $5002
                        	    28: ACIA_CTRL   = $5003
                        	    29: ; --- Wozmon entry points and defines.
                        	    30: WOZMON = $FF00
                        	    31: IN    = $0200                          ; Input buffer
                        	    32: ECHO  = $FFEF
                        	    33: save_y = $50
                        	    34: save_x = $51
                        	    35: 
                        	    36: ; ------- program start. 
                        	    37: ; Start at 01000x in RAM using WozMon
                        	    38:   .org $1000
                        	    39: 
                        	    40: ; Program entry point. Initialize LCD.
                        	    41: input_lcd:
00:1000 20AA10          	    42:   jsr lcd_setup
                        	    43: 
                        	    44: ;
                        	    45: ;
                        	    46: ; Code starts here
                        	    47: ;
                        	    48: ; Output line 1 to the LCD panel at PORT B on the 65C22 PIA.
                        	    49: out_line_1:
00:1003 A200            	    50:   ldx #0
                        	    51: print_line_1:
00:1005 BD4F10          	    52:   lda line_1,x
00:1008 F007            	    53:   beq out_line_2
00:100A 20CE10          	    54:   jsr print_char
00:100D E8              	    55:   inx
00:100E 4C0510          	    56:   jmp print_line_1
                        	    57: 
                        	    58: out_line_2:
                        	    59: ; move LCD cursor to line 2.
00:1011 A980            	    60:   lda #%10000000 ; set dram address - add in the character offset 
                        	    61: ; for 16 x 2 display, second line starts at 40
00:1013 0928            	    62:   ora #40 ; try to get to 40
00:1015 204611          	    63:   jsr lcd_instruction
                        	    64: ;
00:1018 A200            	    65:   ldx #0
                        	    66: print_line_2:
00:101A BD5110          	    67:   lda line_2,x
00:101D F007            	    68:   beq lcd_done
00:101F 20CE10          	    69:   jsr print_char
00:1022 E8              	    70:   inx
00:1023 4C1A10          	    71:   jmp print_line_2
                        	    72: 
                        	    73: lcd_done:
00:1026 A200            	    74:   ldx #0    ;note for future. is some way to set up zero page pointer to each message string and send it? 
                        	    75:   ; Print STR subroutine.
                        	    76: print_prompt_loop:
00:1028 BD6210          	    77:   lda prompt,x
00:102B F007            	    78:   beq prompt_done
00:102D 20EFFF          	    79:   jsr ECHO
00:1030 E8              	    80:   inx
00:1031 4C2810          	    81:   jmp print_prompt_loop
                        	    82: 
                        	    83: prompt_done:
                        	    84: 
                        	    85: ; now setup with default messages.
                        	    86: ; Reset LCD to first char.
00:1034 A980            	    87:   lda #%10000000 ; set dram address - add in the character offset 
00:1036 204611          	    88:   jsr lcd_instruction
                        	    89: ; grab buffer
00:1039 207310          	    90:   jsr get_input
00:103C A200            	    91:   ldx #0
                        	    92: out_lcd:
00:103E BD0002          	    93:   lda IN,x 
00:1041 C90D            	    94:   cmp #$0D
00:1043 F007            	    95:   beq done
00:1045 20CE10          	    96:   jsr print_char
00:1048 E8              	    97:   inx 
00:1049 4C3E10          	    98:   jmp out_lcd
                        	    99: 
                        	   100: done:
00:104C 4C00FF          	   101:   jmp WOZMON  ; return to wozmon.
                        	   102: 
                        	   103: 
                        	   104: ; Message to print for line 1 and line 2 of the LCD.
00:104F 20              	   105: line_1: .asciiz " "
00:1050 00
00:1051 2E20363543303220	   106: line_2: .asciiz ". 65C02 Computer"
00:1059 436F6D7075746572
00:1061 00
                        	   107: ;                1234567890123456   ;; 16 chars
00:1062 456E746572206120	   108: prompt: .asciiz "Enter a string: "
00:106A 737472696E673A20
00:1072 00
                        	   109: 
                        	   110: get_input:
                        	   111: 
00:1073 A000            	   112:   ldy #$00
                        	   113: 
                        	   114: read_char:
00:1075 AD0150          	   115:   lda     ACIA_STATUS    ; Check status.
00:1078 2908            	   116:   and     #$08           ; Key ready?
00:107A F0F9            	   117:   beq     read_char       ; Loop until ready.
00:107C AD0050          	   118:   lda     ACIA_DATA      ; Load character. B7 will be '0'.
00:107F 990002          	   119:   sta     IN,Y           ; Add to text buffer.
00:1082 20EFFF          	   120:   jsr     ECHO           ; Display character.
                        	   121:   ;; custom version of GETLINE from Wozmon.
00:1085 C908            	   122:   cmp     #$08           ; Backspace key?
00:1087 F018            	   123:   beq     backspace      ; Yes.
00:1089 C91B            	   124:   cmp     #$1B           ; ESC?
00:108B F00C            	   125:   beq     escape         ; Yes.
00:108D C90D            	   126:   cmp     #$0D    ; CR?
00:108F F016            	   127:   beq     input_done
                        	   128: 
00:1091 8450            	   129:   sty save_y
00:1093 C8              	   130:   iny                    ; Advance text index.
00:1094 3003            	   131:   bmi     escape       ; Auto ESC if line longer than 127.
00:1096 4C7510          	   132:   jmp read_char
                        	   133: 
                        	   134: escape:
00:1099 A95C            	   135:   lda     #$5C           ; "\".
00:109B 20EFFF          	   136:   jsr     ECHO           ; Output it.
00:109E 4C7310          	   137:   jmp get_input
                        	   138: 
                        	   139: backspace:      
00:10A1 88              	   140:   dey                    ; Back up text index.
00:10A2 30CF            	   141:   bmi     get_input        ; Beyond start of line, reinitialize.
00:10A4 4C7510          	   142:   jmp read_char
                        	   143: 
                        	   144: input_done:
00:10A7 8450            	   145:   sty save_y
00:10A9 60              	   146:   rts
                        	   147: 
                        	   148: 
                        	   149: lcd_setup:
00:10AA 48              	   150:   pha          ; Save A
                        	   151: ; Initialize the LCD display - first 65C22 all outputs.
                        	   152: ; get ready to set the LCD
00:10AB A9FF            	   153:   lda #$ff      ; Port B = All output
00:10AD 8D0260          	   154:   sta DDRB
00:10B0 A9FF            	   155:   lda #$ff      ; Port A = All output for blinkenlights!
00:10B2 8D0360          	   156:   sta DDRA
                        	   157: 
                        	   158: ; -- LCD Configuration. 4 bit mode, 2 line display
00:10B5 202A11          	   159:   jsr lcd_init
00:10B8 A928            	   160:   lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
00:10BA 204611          	   161:   jsr lcd_instruction
00:10BD A90E            	   162:   lda #%00001110 ; Display on; cursor on; blink off
00:10BF 204611          	   163:   jsr lcd_instruction
00:10C2 A906            	   164:   lda #%00000110 ; Entry Mode Set - Increment and shift cursor; don't shift display
00:10C4 204611          	   165:   jsr lcd_instruction
00:10C7 A901            	   166:   lda #%00000001 ; Clear display
00:10C9 204611          	   167:   jsr lcd_instruction
                        	   168:   
00:10CC 68              	   169:   pla   ; restore A
00:10CD 60              	   170:   rts
                        	   171: ;
                        	   172: ; output a character to current LCD char position.
                        	   173: ;
                        	   174: print_char:
00:10CE 20F810          	   175:   jsr lcd_wait
00:10D1 48              	   176:   pha
00:10D2 4A              	   177:   lsr
00:10D3 4A              	   178:   lsr
00:10D4 4A              	   179:   lsr
00:10D5 4A              	   180:   lsr             ; Send high 4 bits
00:10D6 0910            	   181:   ora #RS         ; Set RS
00:10D8 8D0060          	   182:   sta PORTB
00:10DB 0940            	   183:   ora #E          ; Set E bit to send instruction
00:10DD 8D0060          	   184:   sta PORTB
00:10E0 4940            	   185:   eor #E          ; Clear E bit
00:10E2 8D0060          	   186:   sta PORTB
00:10E5 68              	   187:   pla
00:10E6 290F            	   188:   and #%00001111  ; Send low 4 bits
00:10E8 0910            	   189:   ora #RS         ; Set RS
00:10EA 8D0060          	   190:   sta PORTB
00:10ED 0940            	   191:   ora #E          ; Set E bit to send instruction
00:10EF 8D0060          	   192:   sta PORTB
00:10F2 4940            	   193:   eor #E          ; Clear E bit
00:10F4 8D0060          	   194:   sta PORTB
00:10F7 60              	   195:   rts
                        	   196: 
                        	   197: ; LCD subroutines
                        	   198: lcd_wait:
00:10F8 48              	   199:   pha
00:10F9 A9F0            	   200:   lda #%11110000  ; LCD data is input
00:10FB 8D0260          	   201:   sta DDRB
                        	   202: lcdbusy:
00:10FE A920            	   203:   lda #RW
00:1100 8D0060          	   204:   sta PORTB
00:1103 A960            	   205:   lda #(RW | E)
00:1105 8D0060          	   206:   sta PORTB
00:1108 AD0060          	   207:   lda PORTB       ; Read high nibble
00:110B 48              	   208:   pha             ; and put on stack since it has the busy flag
00:110C A920            	   209:   lda #RW
00:110E 8D0060          	   210:   sta PORTB
00:1111 A960            	   211:   lda #(RW | E)
00:1113 8D0060          	   212:   sta PORTB
00:1116 AD0060          	   213:   lda PORTB       ; Read low nibble
00:1119 68              	   214:   pla             ; Get high nibble off stack
00:111A 2908            	   215:   and #%00001000
00:111C D0E0            	   216:   bne lcdbusy
                        	   217: 
00:111E A920            	   218:   lda #RW
00:1120 8D0060          	   219:   sta PORTB
00:1123 A9FF            	   220:   lda #%11111111  ; LCD data is output
00:1125 8D0260          	   221:   sta DDRB
00:1128 68              	   222:   pla
00:1129 60              	   223:   rts
                        	   224: 
                        	   225: lcd_init:
00:112A A902            	   226:   lda #%00000010 ; Set 4-bit mode
00:112C 8D0060          	   227:   sta PORTB
00:112F 0940            	   228:   ora #E
00:1131 8D0060          	   229:   sta PORTB
00:1134 A908            	   230:   lda #%00001000 ; 2 lines
00:1136 290F            	   231:   and #%00001111
00:1138 8D0060          	   232:   sta PORTB
00:113B 0940            	   233:   ora #E
00:113D 8D0060          	   234:   sta PORTB
00:1140 4940            	   235:   eor #E
00:1142 8D0060          	   236:   sta PORTB
00:1145 60              	   237:   rts
                        	   238: 
                        	   239: lcd_instruction:
00:1146 20F810          	   240:   jsr lcd_wait
00:1149 48              	   241:   pha
00:114A 4A              	   242:   lsr
00:114B 4A              	   243:   lsr
00:114C 4A              	   244:   lsr
00:114D 4A              	   245:   lsr            ; Send high 4 bits
00:114E 8D0060          	   246:   sta PORTB
00:1151 0940            	   247:   ora #E         ; Set E bit to send instruction
00:1153 8D0060          	   248:   sta PORTB
00:1156 4940            	   249:   eor #E         ; Clear E bit
00:1158 8D0060          	   250:   sta PORTB
00:115B 68              	   251:   pla
00:115C 290F            	   252:   and #%00001111 ; Send low 4 bits
00:115E 8D0060          	   253:   sta PORTB
00:1161 0940            	   254:   ora #E         ; Set E bit to send instruction
00:1163 8D0060          	   255:   sta PORTB
00:1166 4940            	   256:   eor #E         ; Clear E bit
00:1168 8D0060          	   257:   sta PORTB
00:116B 60              	   258:   rts
                        	   259: 
                        	   260: 


Symbols by name:
ACIA_DATA                        E:5000
ACIA_STATUS                      E:5001
DDRA                             E:6003
DDRB                             E:6002
E                                E:0040
ECHO                             E:FFEF
IN                               E:0200
PORTB                            E:6000
RS                               E:0010
RW                               E:0020
WOZMON                           E:FF00
backspace                        A:10A1
done                             A:104C
escape                           A:1099
get_input                        A:1073
input_done                       A:10A7
input_lcd                        A:1000
lcd_done                         A:1026
lcd_init                         A:112A
lcd_instruction                  A:1146
lcd_setup                        A:10AA
lcd_wait                         A:10F8
lcdbusy                          A:10FE
line_1                           A:104F
line_2                           A:1051
out_lcd                          A:103E
out_line_1                       A:1003
out_line_2                       A:1011
print_char                       A:10CE
print_line_1                     A:1005
print_line_2                     A:101A
print_prompt_loop                A:1028
prompt                           A:1062
prompt_done                      A:1034
read_char                        A:1075
save_y                           E:0050

Symbols by value:
0010 RS
0020 RW
0040 E
0050 save_y
0200 IN
1000 input_lcd
1003 out_line_1
1005 print_line_1
1011 out_line_2
101A print_line_2
1026 lcd_done
1028 print_prompt_loop
1034 prompt_done
103E out_lcd
104C done
104F line_1
1051 line_2
1062 prompt
1073 get_input
1075 read_char
1099 escape
10A1 backspace
10A7 input_done
10AA lcd_setup
10CE print_char
10F8 lcd_wait
10FE lcdbusy
112A lcd_init
1146 lcd_instruction
5000 ACIA_DATA
5001 ACIA_STATUS
6000 PORTB
6002 DDRB
6003 DDRA
FF00 WOZMON
FFEF ECHO
